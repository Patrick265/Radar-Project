
RadarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000032e  000003c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800124  00800124  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca2  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008dd  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000668  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000312  00000000  00000000  000026b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int sendBack = 1;
int safety = 0;

int main(void)
{
	twi_init();
  a6:	0e 94 27 01 	call	0x24e	; 0x24e <twi_init>
	fill_board();
  aa:	0e 94 02 01 	call	0x204	; 0x204 <fill_board>
	
	 DDRB = 0b00110000;
  ae:	80 e3       	ldi	r24, 0x30	; 48
  b0:	84 b9       	out	0x04, r24	; 4
	 EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
  b2:	e9 e6       	ldi	r30, 0x69	; 105
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
	 EIMSK |= (1 << INT0);     // Turns on INT0
  bc:	e8 9a       	sbi	0x1d, 0	; 29
	 
	 sei();    
  be:	78 94       	sei
    while (1) 
    {
		PORTB |= 0b00010000;
		_delay_us(15);
		PORTB &= 0b11101111;
		distance = (pulse / 928); // Getting the distance in cm
  c0:	20 ea       	ldi	r18, 0xA0	; 160
  c2:	33 e0       	ldi	r19, 0x03	; 3
	 sei();    
	
    /* Replace with your application code */
    while (1) 
    {
		PORTB |= 0b00010000;
  c4:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	80 e5       	ldi	r24, 0x50	; 80
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
		_delay_us(15);
		PORTB &= 0b11101111;
  cc:	2c 98       	cbi	0x05, 4	; 5
		distance = (pulse / 928); // Getting the distance in cm
  ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pulse>
  d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pulse+0x1>
  d6:	b9 01       	movw	r22, r18
  d8:	0e 94 6d 01 	call	0x2da	; 0x2da <__divmodhi4>
  dc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  e0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
		
		if(distance<=25 && distance >= 5){//&& distance <= 10){
  e4:	65 50       	subi	r22, 0x05	; 5
  e6:	71 09       	sbc	r23, r1
  e8:	65 31       	cpi	r22, 0x15	; 21
  ea:	71 05       	cpc	r23, r1
  ec:	10 f4       	brcc	.+4      	; 0xf2 <main+0x4c>
			PORTB |= 0b00100000;
  ee:	2d 9a       	sbi	0x05, 5	; 5
  f0:	e9 cf       	rjmp	.-46     	; 0xc4 <main+0x1e>
		}
		else{
			
			PORTB &= 0b11011111;
  f2:	2d 98       	cbi	0x05, 5	; 5
  f4:	e7 cf       	rjmp	.-50     	; 0xc4 <main+0x1e>

000000f6 <__vector_1>:
	}
    
}

ISR(INT0_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	if(UltrSoneOn == 1){
 108:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 10c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	89 f4       	brne	.+34     	; 0x136 <__vector_1+0x40>
		TCCR1B = 0;
 114:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		pulse = TCNT1;
 118:	e4 e8       	ldi	r30, 0x84	; 132
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	91 81       	ldd	r25, Z+1	; 0x01
 120:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pulse+0x1>
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pulse>
		TCNT1 = 0;
 128:	11 82       	std	Z+1, r1	; 0x01
 12a:	10 82       	st	Z, r1
		UltrSoneOn = 0;
 12c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__data_end+0x1>
 130:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
 134:	0b c0       	rjmp	.+22     	; 0x14c <__vector_1+0x56>
	}
	else{
		TCCR1B |= 1<<CS10;
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
		UltrSoneOn = 1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
 148:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	}
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <twi_start>:
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 15e:	84 ea       	ldi	r24, 0xA4	; 164
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 164:	ec eb       	ldi	r30, 0xBC	; 188
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 23       	and	r24, r24
 16c:	ec f7       	brge	.-6      	; 0x168 <twi_start+0xa>
 16e:	08 95       	ret

00000170 <twi_tx>:
}


void twi_tx(unsigned char data)
{
	TWDR = data;
 170:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (0x80 | 0x04);
 174:	84 e8       	ldi	r24, 0x84	; 132
 176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while( 0 == (TWCR & 0x80) );
 17a:	ec eb       	ldi	r30, 0xBC	; 188
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	ec f7       	brge	.-6      	; 0x17e <twi_tx+0xe>
}
 184:	08 95       	ret

00000186 <clear_column>:

void clear_column(int column)
{
 186:	cf 93       	push	r28
 188:	c8 2f       	mov	r28, r24
	twi_start();
 18a:	0e 94 af 00 	call	0x15e	; 0x15e <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 18e:	80 ee       	ldi	r24, 0xE0	; 224
 190:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
	twi_tx(column);	// Address
 194:	8c 2f       	mov	r24, r28
 196:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
	twi_tx(0b00000000);	// data
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1a0:	84 e9       	ldi	r24, 0x94	; 148
 1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(column);	// Address
	twi_tx(0b00000000);	// data
	twi_stop();
}
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <fill_column>:

void fill_column(int column , int amount) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	d8 2f       	mov	r29, r24
 1b0:	c6 2f       	mov	r28, r22
	twi_start();
 1b2:	0e 94 af 00 	call	0x15e	; 0x15e <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 1b6:	80 ee       	ldi	r24, 0xE0	; 224
 1b8:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
	twi_tx(column);	// Address
 1bc:	8d 2f       	mov	r24, r29
 1be:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
	twi_tx(amount);	// data
 1c2:	8c 2f       	mov	r24, r28
 1c4:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 1c8:	84 e9       	ldi	r24, 0x94	; 148
 1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(column);	// Address
	twi_tx(amount);	// data
	twi_stop();
	
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <clear_board>:

void clear_board() {
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	c4 e1       	ldi	r28, 0x14	; 20
 1de:	d1 e0       	ldi	r29, 0x01	; 1
 1e0:	04 e2       	ldi	r16, 0x24	; 36
 1e2:	11 e0       	ldi	r17, 0x01	; 1
	int i;
	for(i =0; i < 8; i++) {
		clear_column(columns[i]);
 1e4:	89 91       	ld	r24, Y+
 1e6:	99 91       	ld	r25, Y+
 1e8:	0e 94 c3 00 	call	0x186	; 0x186 <clear_column>
		wait(100);
 1ec:	84 e6       	ldi	r24, 0x64	; 100
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <wait>
	
}

void clear_board() {
	int i;
	for(i =0; i < 8; i++) {
 1f4:	c0 17       	cp	r28, r16
 1f6:	d1 07       	cpc	r29, r17
 1f8:	a9 f7       	brne	.-22     	; 0x1e4 <clear_board+0x10>
		clear_column(columns[i]);
		wait(100);
	}
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <fill_board>:

void fill_board() {
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	c4 e1       	ldi	r28, 0x14	; 20
 212:	d1 e0       	ldi	r29, 0x01	; 1
 214:	0f 2e       	mov	r0, r31
 216:	f4 e2       	ldi	r31, 0x24	; 36
 218:	ef 2e       	mov	r14, r31
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	ff 2e       	mov	r15, r31
 21e:	f0 2d       	mov	r31, r0
	int i;
	for ( i = 0; i < 8; i++) {
		fill_column(columns[i], rows[7]);
 220:	04 e0       	ldi	r16, 0x04	; 4
 222:	11 e0       	ldi	r17, 0x01	; 1
 224:	f8 01       	movw	r30, r16
 226:	66 85       	ldd	r22, Z+14	; 0x0e
 228:	77 85       	ldd	r23, Z+15	; 0x0f
 22a:	89 91       	ld	r24, Y+
 22c:	99 91       	ld	r25, Y+
 22e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <fill_column>
		wait(2000);
 232:	80 ed       	ldi	r24, 0xD0	; 208
 234:	97 e0       	ldi	r25, 0x07	; 7
 236:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <wait>
	}
}

void fill_board() {
	int i;
	for ( i = 0; i < 8; i++) {
 23a:	ce 15       	cp	r28, r14
 23c:	df 05       	cpc	r29, r15
 23e:	91 f7       	brne	.-28     	; 0x224 <fill_board+0x20>
		fill_column(columns[i], rows[7]);
		wait(2000);
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	08 95       	ret

0000024e <twi_init>:

void twi_init(void)
{
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
	TWSR = 0;
 254:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//Init HT16K22. Page 32 datasheet
	twi_start();
 25e:	0e 94 af 00 	call	0x15e	; 0x15e <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 262:	80 ee       	ldi	r24, 0xE0	; 224
 264:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 268:	81 e2       	ldi	r24, 0x21	; 33
 26a:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 26e:	cc eb       	ldi	r28, 0xBC	; 188
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	14 e9       	ldi	r17, 0x94	; 148
 274:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 276:	0e 94 af 00 	call	0x15e	; 0x15e <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 27a:	80 ee       	ldi	r24, 0xE0	; 224
 27c:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 280:	80 ea       	ldi	r24, 0xA0	; 160
 282:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 286:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 288:	0e 94 af 00 	call	0x15e	; 0x15e <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 28c:	80 ee       	ldi	r24, 0xE0	; 224
 28e:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 292:	83 ee       	ldi	r24, 0xE3	; 227
 294:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 298:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 29a:	0e 94 af 00 	call	0x15e	; 0x15e <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 29e:	80 ee       	ldi	r24, 0xE0	; 224
 2a0:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 2a4:	81 e8       	ldi	r24, 0x81	; 129
 2a6:	0e 94 b8 00 	call	0x170	; 0x170 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 2aa:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
	clear_board();
 2ac:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <clear_board>
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	08 95       	ret

000002b8 <wait>:
#include <util/delay.h>
#include "util.h"

void wait (int ms)
{
	for (int i  = 0; i<ms; i++){
 2b8:	18 16       	cp	r1, r24
 2ba:	19 06       	cpc	r1, r25
 2bc:	6c f4       	brge	.+26     	; 0x2d8 <wait+0x20>
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	e7 e8       	ldi	r30, 0x87	; 135
 2c4:	f3 e1       	ldi	r31, 0x13	; 19
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <wait+0xe>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <wait+0x14>
 2cc:	00 00       	nop
 2ce:	2f 5f       	subi	r18, 0xFF	; 255
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	82 17       	cp	r24, r18
 2d4:	93 07       	cpc	r25, r19
 2d6:	a9 f7       	brne	.-22     	; 0x2c2 <wait+0xa>
 2d8:	08 95       	ret

000002da <__divmodhi4>:
 2da:	97 fb       	bst	r25, 7
 2dc:	07 2e       	mov	r0, r23
 2de:	16 f4       	brtc	.+4      	; 0x2e4 <__divmodhi4+0xa>
 2e0:	00 94       	com	r0
 2e2:	07 d0       	rcall	.+14     	; 0x2f2 <__divmodhi4_neg1>
 2e4:	77 fd       	sbrc	r23, 7
 2e6:	09 d0       	rcall	.+18     	; 0x2fa <__divmodhi4_neg2>
 2e8:	0e 94 81 01 	call	0x302	; 0x302 <__udivmodhi4>
 2ec:	07 fc       	sbrc	r0, 7
 2ee:	05 d0       	rcall	.+10     	; 0x2fa <__divmodhi4_neg2>
 2f0:	3e f4       	brtc	.+14     	; 0x300 <__divmodhi4_exit>

000002f2 <__divmodhi4_neg1>:
 2f2:	90 95       	com	r25
 2f4:	81 95       	neg	r24
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__divmodhi4_neg2>:
 2fa:	70 95       	com	r23
 2fc:	61 95       	neg	r22
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000300 <__divmodhi4_exit>:
 300:	08 95       	ret

00000302 <__udivmodhi4>:
 302:	aa 1b       	sub	r26, r26
 304:	bb 1b       	sub	r27, r27
 306:	51 e1       	ldi	r21, 0x11	; 17
 308:	07 c0       	rjmp	.+14     	; 0x318 <__udivmodhi4_ep>

0000030a <__udivmodhi4_loop>:
 30a:	aa 1f       	adc	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	a6 17       	cp	r26, r22
 310:	b7 07       	cpc	r27, r23
 312:	10 f0       	brcs	.+4      	; 0x318 <__udivmodhi4_ep>
 314:	a6 1b       	sub	r26, r22
 316:	b7 0b       	sbc	r27, r23

00000318 <__udivmodhi4_ep>:
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	5a 95       	dec	r21
 31e:	a9 f7       	brne	.-22     	; 0x30a <__udivmodhi4_loop>
 320:	80 95       	com	r24
 322:	90 95       	com	r25
 324:	bc 01       	movw	r22, r24
 326:	cd 01       	movw	r24, r26
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
