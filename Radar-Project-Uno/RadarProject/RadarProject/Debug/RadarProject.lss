
RadarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000476  0000050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800122  00800122  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f28  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a43  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000890  00000000  00000000  00001fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f1  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000507  00000000  00000000  00002f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 39 02 	jmp	0x472	; 0x472 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{
	//	Initializing the dot matrix
	twi_init();
  a6:	0e 94 ab 01 	call	0x356	; 0x356 <twi_init>
	clear_board();
  aa:	0e 94 97 01 	call	0x32e	; 0x32e <clear_board>
	//	Setting the input and output
	DDRD = 0b11000000;
  ae:	80 ec       	ldi	r24, 0xC0	; 192
  b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00110000;
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	84 b9       	out	0x04, r24	; 4
	
	//	set INT0 to trigger on ANY logic change
	EICRA |= (1 << ISC00); 
  b6:	e9 e6       	ldi	r30, 0x69	; 105
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	//	Turns on INT0   
	EIMSK |= (1 << INT0);    
  c0:	e8 9a       	sbi	0x1d, 0	; 29
	//	Enable interupts
	sei();
  c2:	78 94       	sei
			//	Sending trigger
			PORTB |= 0b00010000;
			_delay_us(15);
			PORTB &= 0b11101111;
			//	Getting the distance in cm
			distance = (pulse / CM_CONVERT_VALUE); 
  c4:	c4 e7       	ldi	r28, 0x74	; 116
  c6:	d0 e0       	ldi	r29, 0x00	; 0
			//	Getting the average distance by dividing the cumulative amount by the amount of scans
			int averageDistance;
			averageDistance = scanValue/scanTimes;
			//	Setting the right column of the dot matrix
			clear_column(MotorIndex);
			fill_column(MotorIndex, (int)averageDistance/3);
  c8:	03 e0       	ldi	r16, 0x03	; 3
  ca:	10 e0       	ldi	r17, 0x00	; 0
	sei();
	
	while (1)
	{
		//	Checking if the direction of the motor needs to be changed
		if(MotorIndex == MAX_TURN_VALUE || MotorIndex == MIN_TURN_VALUE ){
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
  d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
  d4:	87 30       	cpi	r24, 0x07	; 7
  d6:	91 05       	cpc	r25, r1
  d8:	19 f0       	breq	.+6      	; 0xe0 <main+0x3a>
  da:	89 2b       	or	r24, r25
  dc:	09 f0       	breq	.+2      	; 0xe0 <main+0x3a>
  de:	7b c0       	rjmp	.+246    	; 0x1d6 <main+0x130>
			ChangeDirection();
  e0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <ChangeDirection>
  e4:	78 c0       	rjmp	.+240    	; 0x1d6 <main+0x130>
			_delay_ms(STEP_DELAY_VALUE);
		}
		
		//	Updating the motorindex
		if(getDirection() == 0){
			MotorIndex = MotorIndex + 1;
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MotorIndex+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MotorIndex>
  f8:	95 c0       	rjmp	.+298    	; 0x224 <main+0x17e>
		}
		else{
			MotorIndex = MotorIndex - 1;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MotorIndex+0x1>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MotorIndex>
 10c:	8b c0       	rjmp	.+278    	; 0x224 <main+0x17e>
		
		//	Scanning with the ultrasone
		int scanAmount;
		for(scanAmount = 0; scanAmount < 100; scanAmount++){
			//	Sending trigger
			PORTB |= 0b00010000;
 10e:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	80 e5       	ldi	r24, 0x50	; 80
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x6c>
			_delay_us(15);
			PORTB &= 0b11101111;
 116:	2c 98       	cbi	0x05, 4	; 5
			//	Getting the distance in cm
			distance = (pulse / CM_CONVERT_VALUE); 
 118:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <pulse>
 11c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <pulse+0x1>
 120:	be 01       	movw	r22, r28
 122:	0e 94 11 02 	call	0x422	; 0x422 <__divmodhi4>
 126:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <distance+0x1>
 12a:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <distance>
			
			//	Checking if the distance is in selected range
			if(distance<=MAX_DISTANCE && distance >= MIN_DISTANCE){//&& distance <= 10){
 12e:	63 50       	subi	r22, 0x03	; 3
 130:	71 09       	sbc	r23, r1
 132:	66 31       	cpi	r22, 0x16	; 22
 134:	71 05       	cpc	r23, r1
 136:	c8 f4       	brcc	.+50     	; 0x16a <main+0xc4>
				PORTB |= 0b00100000;
 138:	2d 9a       	sbi	0x05, 5	; 5
				//	Adding the new distance to the cumulative total
				scanValue = scanValue + distance;
 13a:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <scanValue>
 13e:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <scanValue+0x1>
 142:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <distance>
 146:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <distance+0x1>
 14a:	84 0f       	add	r24, r20
 14c:	95 1f       	adc	r25, r21
 14e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <scanValue+0x1>
 152:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <scanValue>
				scanTimes += 1;
 156:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 15a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
 164:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 168:	01 c0       	rjmp	.+2      	; 0x16c <main+0xc6>
			}
			else{
				PORTB &= 0b11011111;
 16a:	2d 98       	cbi	0x05, 5	; 5
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	31 09       	sbc	r19, r1
			MotorIndex = MotorIndex - 1;
		}
		
		//	Scanning with the ultrasone
		int scanAmount;
		for(scanAmount = 0; scanAmount < 100; scanAmount++){
 170:	71 f6       	brne	.-100    	; 0x10e <main+0x68>
				PORTB &= 0b11011111;
			}
		}

		//	Checking if there were valid measurements
		if(scanTimes != 0){
 172:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end>
 176:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <__data_end+0x1>
 17a:	61 15       	cp	r22, r1
 17c:	71 05       	cpc	r23, r1
 17e:	c1 f0       	breq	.+48     	; 0x1b0 <main+0x10a>
			//	Getting the average distance by dividing the cumulative amount by the amount of scans
			int averageDistance;
			averageDistance = scanValue/scanTimes;
 180:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <scanValue>
 184:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <scanValue+0x1>
 188:	0e 94 11 02 	call	0x422	; 0x422 <__divmodhi4>
 18c:	7b 01       	movw	r14, r22
			//	Setting the right column of the dot matrix
			clear_column(MotorIndex);
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 192:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 196:	0e 94 5d 01 	call	0x2ba	; 0x2ba <clear_column>
			fill_column(MotorIndex, (int)averageDistance/3);
 19a:	c7 01       	movw	r24, r14
 19c:	b8 01       	movw	r22, r16
 19e:	0e 94 11 02 	call	0x422	; 0x422 <__divmodhi4>
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 1a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 1aa:	0e 94 75 01 	call	0x2ea	; 0x2ea <fill_column>
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <main+0x116>
		}
		else{
			clear_column(MotorIndex);
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 1b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 1b8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <clear_column>
		}
		//	Resetting values
		scanTimes = 0;
 1bc:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
 1c0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
		scanValue = 0;
 1c4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <scanValue+0x1>
 1c8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <scanValue>
		wait(1000);
 1cc:	88 ee       	ldi	r24, 0xE8	; 232
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	0e 94 00 02 	call	0x400	; 0x400 <wait>
	}
 1d4:	7b cf       	rjmp	.-266    	; 0xcc <main+0x26>
		}
		
		//	Setting steps for 1/16th of 360 degrees (22.5 degrees)
		int i;
		for(i=0;i<STEP_SIZE;i++){
			SetStep();
 1d6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SetStep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	9f ef       	ldi	r25, 0xFF	; 255
 1dc:	29 e6       	ldi	r18, 0x69	; 105
 1de:	88 e1       	ldi	r24, 0x18	; 24
 1e0:	91 50       	subi	r25, 0x01	; 1
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x13a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x144>
 1ea:	00 00       	nop
 1ec:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SetStep>
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
 1f2:	29 e6       	ldi	r18, 0x69	; 105
 1f4:	88 e1       	ldi	r24, 0x18	; 24
 1f6:	91 50       	subi	r25, 0x01	; 1
 1f8:	20 40       	sbci	r18, 0x00	; 0
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x150>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x15a>
 200:	00 00       	nop
 202:	0e 94 e5 01 	call	0x3ca	; 0x3ca <SetStep>
 206:	9f ef       	ldi	r25, 0xFF	; 255
 208:	29 e6       	ldi	r18, 0x69	; 105
 20a:	88 e1       	ldi	r24, 0x18	; 24
 20c:	91 50       	subi	r25, 0x01	; 1
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x166>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x170>
 216:	00 00       	nop
			_delay_ms(STEP_DELAY_VALUE);
		}
		
		//	Updating the motorindex
		if(getDirection() == 0){
 218:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <getDirection>
 21c:	89 2b       	or	r24, r25
 21e:	09 f4       	brne	.+2      	; 0x222 <main+0x17c>
 220:	62 cf       	rjmp	.-316    	; 0xe6 <main+0x40>
 222:	6b cf       	rjmp	.-298    	; 0xfa <main+0x54>
int scanValue = 0;		//	Cumulative distance of every correct measurement
int scanTimes = 0;		//	Amount of correct measurements


int main(void)
{
 224:	24 e6       	ldi	r18, 0x64	; 100
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	72 cf       	rjmp	.-284    	; 0x10e <main+0x68>

0000022a <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
	//	Stopping the timer and storing the pulse
	if(UltrSoneOn == 1){
 23c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <UltrSoneOn>
 240:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <UltrSoneOn+0x1>
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	89 f4       	brne	.+34     	; 0x26a <__vector_1+0x40>
		TCCR1B = 0;
 248:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		pulse = TCNT1;
 24c:	e4 e8       	ldi	r30, 0x84	; 132
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <pulse+0x1>
 258:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <pulse>
		TCNT1 = 0;
 25c:	11 82       	std	Z+1, r1	; 0x01
 25e:	10 82       	st	Z, r1
		UltrSoneOn = 0;
 260:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <UltrSoneOn+0x1>
 264:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <UltrSoneOn>
 268:	0b c0       	rjmp	.+22     	; 0x280 <__vector_1+0x56>
	}
	//	Starting the timer
	else{
		TCCR1B |= 1<<CS11;
 26a:	e1 e8       	ldi	r30, 0x81	; 129
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	82 60       	ori	r24, 0x02	; 2
 272:	80 83       	st	Z, r24
		UltrSoneOn = 1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <UltrSoneOn+0x1>
 27c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <UltrSoneOn>
	}
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <twi_start>:
	int i;
	for ( i = 0; i < 8; i++) {
		fill_column(columns[i], rows[7]);
		wait(500);
	}
}
 292:	84 ea       	ldi	r24, 0xA4	; 164
 294:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 298:	ec eb       	ldi	r30, 0xBC	; 188
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	88 23       	and	r24, r24
 2a0:	ec f7       	brge	.-6      	; 0x29c <twi_start+0xa>
 2a2:	08 95       	ret

000002a4 <twi_tx>:
 2a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2a8:	84 e8       	ldi	r24, 0x84	; 132
 2aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2ae:	ec eb       	ldi	r30, 0xBC	; 188
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	ec f7       	brge	.-6      	; 0x2b2 <twi_tx+0xe>
 2b8:	08 95       	ret

000002ba <clear_column>:
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
 2c0:	0e 94 49 01 	call	0x292	; 0x292 <twi_start>
 2c4:	80 ee       	ldi	r24, 0xE0	; 224
 2c6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
 2ca:	cc 0f       	add	r28, r28
 2cc:	dd 1f       	adc	r29, r29
 2ce:	ce 5e       	subi	r28, 0xEE	; 238
 2d0:	de 4f       	sbci	r29, 0xFE	; 254
 2d2:	88 81       	ld	r24, Y
 2d4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
 2de:	84 e9       	ldi	r24, 0x94	; 148
 2e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <fill_column>:
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	8c 01       	movw	r16, r24
 2f4:	eb 01       	movw	r28, r22
 2f6:	0e 94 49 01 	call	0x292	; 0x292 <twi_start>
 2fa:	80 ee       	ldi	r24, 0xE0	; 224
 2fc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
 300:	00 0f       	add	r16, r16
 302:	11 1f       	adc	r17, r17
 304:	f8 01       	movw	r30, r16
 306:	ee 5e       	subi	r30, 0xEE	; 238
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 81       	ld	r24, Z
 30c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
 310:	cc 0f       	add	r28, r28
 312:	dd 1f       	adc	r29, r29
 314:	ce 5f       	subi	r28, 0xFE	; 254
 316:	de 4f       	sbci	r29, 0xFE	; 254
 318:	88 81       	ld	r24, Y
 31a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
 31e:	84 e9       	ldi	r24, 0x94	; 148
 320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <clear_board>:
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	c2 e1       	ldi	r28, 0x12	; 18
 338:	d1 e0       	ldi	r29, 0x01	; 1
 33a:	02 e2       	ldi	r16, 0x22	; 34
 33c:	11 e0       	ldi	r17, 0x01	; 1
 33e:	89 91       	ld	r24, Y+
 340:	99 91       	ld	r25, Y+
 342:	0e 94 5d 01 	call	0x2ba	; 0x2ba <clear_column>
 346:	c0 17       	cp	r28, r16
 348:	d1 07       	cpc	r29, r17
 34a:	c9 f7       	brne	.-14     	; 0x33e <clear_board+0x10>
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <twi_init>:

void twi_init(void)
{
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
	TWSR = 0;
 35c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 360:	80 e2       	ldi	r24, 0x20	; 32
 362:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//Init HT16K22. Page 32 datasheet
	twi_start();
 366:	0e 94 49 01 	call	0x292	; 0x292 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 36a:	80 ee       	ldi	r24, 0xE0	; 224
 36c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 370:	81 e2       	ldi	r24, 0x21	; 33
 372:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 376:	cc eb       	ldi	r28, 0xBC	; 188
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	14 e9       	ldi	r17, 0x94	; 148
 37c:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 37e:	0e 94 49 01 	call	0x292	; 0x292 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 382:	80 ee       	ldi	r24, 0xE0	; 224
 384:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 388:	80 ea       	ldi	r24, 0xA0	; 160
 38a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 38e:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 390:	0e 94 49 01 	call	0x292	; 0x292 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 394:	80 ee       	ldi	r24, 0xE0	; 224
 396:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 39a:	83 ee       	ldi	r24, 0xE3	; 227
 39c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 3a0:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 3a2:	0e 94 49 01 	call	0x292	; 0x292 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 3a6:	80 ee       	ldi	r24, 0xE0	; 224
 3a8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 3ac:	81 e8       	ldi	r24, 0x81	; 129
 3ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 3b2:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
	clear_board();
 3b4:	0e 94 97 01 	call	0x32e	; 0x32e <clear_board>
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	08 95       	ret

000003c0 <getDirection>:
int direction = 0;		//	Determines the direction of the motor 

//	Getter for the direction
int getDirection(){
	return direction;
}
 3c0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <direction>
 3c4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <direction+0x1>
 3c8:	08 95       	ret

000003ca <SetStep>:

//	Makes the motor set 1 step of 22,5 degrees in the selected direction
void SetStep(){
	PORTD |= 0b10000000;
 3ca:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3cc:	8a e6       	ldi	r24, 0x6A	; 106
 3ce:	8a 95       	dec	r24
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <SetStep+0x4>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <SetStep+0xa>
	_delay_us(STEP_TRIGGER_VALUE);
	PORTD &= 0b01111111;
 3d4:	5f 98       	cbi	0x0b, 7	; 11
 3d6:	08 95       	ret

000003d8 <ChangeDirection>:
}

//	Changes the direction variable and port
void ChangeDirection(){
	if(direction == 0){
 3d8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <direction>
 3dc:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <direction+0x1>
 3e0:	89 2b       	or	r24, r25
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <ChangeDirection+0x1c>
		direction = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <direction+0x1>
 3ec:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <direction>
		PORTD |= 0b01000000;
 3f0:	5e 9a       	sbi	0x0b, 6	; 11
 3f2:	08 95       	ret
	}
	else{
		direction = 0;
 3f4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <direction+0x1>
 3f8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <direction>
		PORTD &= 0b10111111;
 3fc:	5e 98       	cbi	0x0b, 6	; 11
 3fe:	08 95       	ret

00000400 <wait>:
#include "util.h"

// ms : Determines how many milliseconds the wait will last
void wait (int ms)
{
	for (int i  = 0; i<ms; i++){
 400:	18 16       	cp	r1, r24
 402:	19 06       	cpc	r1, r25
 404:	6c f4       	brge	.+26     	; 0x420 <wait+0x20>
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	e7 e8       	ldi	r30, 0x87	; 135
 40c:	f3 e1       	ldi	r31, 0x13	; 19
 40e:	31 97       	sbiw	r30, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <wait+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <wait+0x14>
 414:	00 00       	nop
 416:	2f 5f       	subi	r18, 0xFF	; 255
 418:	3f 4f       	sbci	r19, 0xFF	; 255
 41a:	82 17       	cp	r24, r18
 41c:	93 07       	cpc	r25, r19
 41e:	a9 f7       	brne	.-22     	; 0x40a <wait+0xa>
 420:	08 95       	ret

00000422 <__divmodhi4>:
 422:	97 fb       	bst	r25, 7
 424:	07 2e       	mov	r0, r23
 426:	16 f4       	brtc	.+4      	; 0x42c <__divmodhi4+0xa>
 428:	00 94       	com	r0
 42a:	07 d0       	rcall	.+14     	; 0x43a <__divmodhi4_neg1>
 42c:	77 fd       	sbrc	r23, 7
 42e:	09 d0       	rcall	.+18     	; 0x442 <__divmodhi4_neg2>
 430:	0e 94 25 02 	call	0x44a	; 0x44a <__udivmodhi4>
 434:	07 fc       	sbrc	r0, 7
 436:	05 d0       	rcall	.+10     	; 0x442 <__divmodhi4_neg2>
 438:	3e f4       	brtc	.+14     	; 0x448 <__divmodhi4_exit>

0000043a <__divmodhi4_neg1>:
 43a:	90 95       	com	r25
 43c:	81 95       	neg	r24
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	08 95       	ret

00000442 <__divmodhi4_neg2>:
 442:	70 95       	com	r23
 444:	61 95       	neg	r22
 446:	7f 4f       	sbci	r23, 0xFF	; 255

00000448 <__divmodhi4_exit>:
 448:	08 95       	ret

0000044a <__udivmodhi4>:
 44a:	aa 1b       	sub	r26, r26
 44c:	bb 1b       	sub	r27, r27
 44e:	51 e1       	ldi	r21, 0x11	; 17
 450:	07 c0       	rjmp	.+14     	; 0x460 <__udivmodhi4_ep>

00000452 <__udivmodhi4_loop>:
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	a6 17       	cp	r26, r22
 458:	b7 07       	cpc	r27, r23
 45a:	10 f0       	brcs	.+4      	; 0x460 <__udivmodhi4_ep>
 45c:	a6 1b       	sub	r26, r22
 45e:	b7 0b       	sbc	r27, r23

00000460 <__udivmodhi4_ep>:
 460:	88 1f       	adc	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	5a 95       	dec	r21
 466:	a9 f7       	brne	.-22     	; 0x452 <__udivmodhi4_loop>
 468:	80 95       	com	r24
 46a:	90 95       	com	r25
 46c:	bc 01       	movw	r22, r24
 46e:	cd 01       	movw	r24, r26
 470:	08 95       	ret

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
