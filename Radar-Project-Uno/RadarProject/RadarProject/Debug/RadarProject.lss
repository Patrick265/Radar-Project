
RadarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000046c  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800122  00800122  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f29  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088a  00000000  00000000  00001fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f1  00000000  00000000  00002a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000507  00000000  00000000  00002f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{
	//	Initializing the dot matrix
	twi_init();
  a6:	0e 94 a6 01 	call	0x34c	; 0x34c <twi_init>
	clear_board();
  aa:	0e 94 92 01 	call	0x324	; 0x324 <clear_board>
	//	Setting the input and output
	DDRD = 0b11000000;
  ae:	80 ec       	ldi	r24, 0xC0	; 192
  b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00110000;
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	84 b9       	out	0x04, r24	; 4
	
	//	set INT0 to trigger on ANY logic change
	EICRA |= (1 << ISC00); 
  b6:	e9 e6       	ldi	r30, 0x69	; 105
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	//	Turns on INT0   
	EIMSK |= (1 << INT0);    
  c0:	e8 9a       	sbi	0x1d, 0	; 29
	//	Enable interupts
	sei();
  c2:	78 94       	sei
			//	Sending trigger
			PORTB |= 0b00010000;
			_delay_us(15);
			PORTB &= 0b11101111;
			//	Getting the distance in cm
			distance = (pulse / CM_CONVERT_VALUE); 
  c4:	c4 e7       	ldi	r28, 0x74	; 116
  c6:	d0 e0       	ldi	r29, 0x00	; 0
	sei();
	
	while (1)
	{
		//	Checking if the direction of the motor needs to be changed
		if(MotorIndex == MAX_TURN_VALUE || MotorIndex == MIN_TURN_VALUE ){
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
  cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
  d0:	87 30       	cpi	r24, 0x07	; 7
  d2:	91 05       	cpc	r25, r1
  d4:	19 f0       	breq	.+6      	; 0xdc <main+0x36>
  d6:	89 2b       	or	r24, r25
  d8:	09 f0       	breq	.+2      	; 0xdc <main+0x36>
  da:	78 c0       	rjmp	.+240    	; 0x1cc <main+0x126>
			ChangeDirection();
  dc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ChangeDirection>
  e0:	75 c0       	rjmp	.+234    	; 0x1cc <main+0x126>
			_delay_ms(STEP_DELAY_VALUE);
		}
		
		//	Updating the motorindex
		if(getDirection() == 0){
			MotorIndex = MotorIndex + 1;
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MotorIndex+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MotorIndex>
  f4:	92 c0       	rjmp	.+292    	; 0x21a <main+0x174>
		}
		else{
			MotorIndex = MotorIndex - 1;
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
  fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MotorIndex+0x1>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MotorIndex>
 108:	88 c0       	rjmp	.+272    	; 0x21a <main+0x174>
		
		//	Scanning with the ultrasone
		int scanAmount;
		for(scanAmount = 0; scanAmount < 100; scanAmount++){
			//	Sending trigger
			PORTB |= 0b00010000;
 10a:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	80 e5       	ldi	r24, 0x50	; 80
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x68>
			_delay_us(15);
			PORTB &= 0b11101111;
 112:	2c 98       	cbi	0x05, 4	; 5
			//	Getting the distance in cm
			distance = (pulse / CM_CONVERT_VALUE); 
 114:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <pulse>
 118:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <pulse+0x1>
 11c:	be 01       	movw	r22, r28
 11e:	0e 94 0c 02 	call	0x418	; 0x418 <__divmodhi4>
 122:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <distance+0x1>
 126:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <distance>
			
			//	Checking if the distance is in selected range
			if(distance<=MAX_DISTANCE && distance >= MIN_DISTANCE){//&& distance <= 10){
 12a:	63 50       	subi	r22, 0x03	; 3
 12c:	71 09       	sbc	r23, r1
 12e:	66 31       	cpi	r22, 0x16	; 22
 130:	71 05       	cpc	r23, r1
 132:	c8 f4       	brcc	.+50     	; 0x166 <main+0xc0>
				PORTB |= 0b00100000;
 134:	2d 9a       	sbi	0x05, 5	; 5
				//	Adding the new distance to the cumulative total
				scanValue = scanValue + distance;
 136:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <scanValue>
 13a:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <scanValue+0x1>
 13e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <distance>
 142:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <distance+0x1>
 146:	84 0f       	add	r24, r20
 148:	95 1f       	adc	r25, r21
 14a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <scanValue+0x1>
 14e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <scanValue>
				scanTimes += 1;
 152:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 156:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
 160:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 164:	01 c0       	rjmp	.+2      	; 0x168 <main+0xc2>
			}
			else{
				PORTB &= 0b11011111;
 166:	2d 98       	cbi	0x05, 5	; 5
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	31 09       	sbc	r19, r1
			MotorIndex = MotorIndex - 1;
		}
		
		//	Scanning with the ultrasone
		int scanAmount;
		for(scanAmount = 0; scanAmount < 100; scanAmount++){
 16c:	71 f6       	brne	.-100    	; 0x10a <main+0x64>
				PORTB &= 0b11011111;
			}
		}

		//	Checking if there were valid measurements
		if(scanTimes != 0){
 16e:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end>
 172:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <__data_end+0x1>
 176:	61 15       	cp	r22, r1
 178:	71 05       	cpc	r23, r1
 17a:	a9 f0       	breq	.+42     	; 0x1a6 <main+0x100>
			//	Getting the average distance by dividing the cumulative amount by the amount of scans
			int averageDistance;
			averageDistance = scanValue/scanTimes;
 17c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <scanValue>
 180:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <scanValue+0x1>
 184:	0e 94 0c 02 	call	0x418	; 0x418 <__divmodhi4>
 188:	8b 01       	movw	r16, r22
			//	Setting the right column of the dot matrix
			clear_column(MotorIndex);
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 192:	0e 94 58 01 	call	0x2b0	; 0x2b0 <clear_column>
			fill_column(MotorIndex, (int)averageDistance/(MAX_COLUMNS/MAX_COLUMNS));
 196:	b8 01       	movw	r22, r16
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 1a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <fill_column>
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <main+0x10c>
		}
		else{
			clear_column(MotorIndex);
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 1aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 1ae:	0e 94 58 01 	call	0x2b0	; 0x2b0 <clear_column>
		}
		//	Resetting values
		scanTimes = 0;
 1b2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
 1b6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
		scanValue = 0;
 1ba:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <scanValue+0x1>
 1be:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <scanValue>
		wait(1000);
 1c2:	88 ee       	ldi	r24, 0xE8	; 232
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <wait>
	}
 1ca:	7e cf       	rjmp	.-260    	; 0xc8 <main+0x22>
		}
		
		//	Setting steps for 1/16th of 360 degrees (22.5 degrees)
		int i;
		for(i=0;i<STEP_SIZE;i++){
			SetStep();
 1cc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SetStep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	9f ef       	ldi	r25, 0xFF	; 255
 1d2:	29 e6       	ldi	r18, 0x69	; 105
 1d4:	88 e1       	ldi	r24, 0x18	; 24
 1d6:	91 50       	subi	r25, 0x01	; 1
 1d8:	20 40       	sbci	r18, 0x00	; 0
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0x130>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x13a>
 1e0:	00 00       	nop
 1e2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SetStep>
 1e6:	9f ef       	ldi	r25, 0xFF	; 255
 1e8:	29 e6       	ldi	r18, 0x69	; 105
 1ea:	88 e1       	ldi	r24, 0x18	; 24
 1ec:	91 50       	subi	r25, 0x01	; 1
 1ee:	20 40       	sbci	r18, 0x00	; 0
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x146>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x150>
 1f6:	00 00       	nop
 1f8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SetStep>
 1fc:	9f ef       	ldi	r25, 0xFF	; 255
 1fe:	29 e6       	ldi	r18, 0x69	; 105
 200:	88 e1       	ldi	r24, 0x18	; 24
 202:	91 50       	subi	r25, 0x01	; 1
 204:	20 40       	sbci	r18, 0x00	; 0
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x15c>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x166>
 20c:	00 00       	nop
			_delay_ms(STEP_DELAY_VALUE);
		}
		
		//	Updating the motorindex
		if(getDirection() == 0){
 20e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <getDirection>
 212:	89 2b       	or	r24, r25
 214:	09 f4       	brne	.+2      	; 0x218 <main+0x172>
 216:	65 cf       	rjmp	.-310    	; 0xe2 <main+0x3c>
 218:	6e cf       	rjmp	.-292    	; 0xf6 <main+0x50>
int scanValue = 0;		//	Cumulative distance of every correct measurement
int scanTimes = 0;		//	Amount of correct measurements


int main(void)
{
 21a:	24 e6       	ldi	r18, 0x64	; 100
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	75 cf       	rjmp	.-278    	; 0x10a <main+0x64>

00000220 <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	//	Stopping the timer and storing the pulse
	if(UltrSoneOn == 1){
 232:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <UltrSoneOn>
 236:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <UltrSoneOn+0x1>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	89 f4       	brne	.+34     	; 0x260 <__vector_1+0x40>
		TCCR1B = 0;
 23e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		pulse = TCNT1;
 242:	e4 e8       	ldi	r30, 0x84	; 132
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <pulse+0x1>
 24e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <pulse>
		TCNT1 = 0;
 252:	11 82       	std	Z+1, r1	; 0x01
 254:	10 82       	st	Z, r1
		UltrSoneOn = 0;
 256:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <UltrSoneOn+0x1>
 25a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <UltrSoneOn>
 25e:	0b c0       	rjmp	.+22     	; 0x276 <__vector_1+0x56>
	}
	//	Starting the timer
	else{
		TCCR1B |= 1<<CS11;
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
		UltrSoneOn = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <UltrSoneOn+0x1>
 272:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <UltrSoneOn>
	}
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <twi_start>:
	int i;
	for ( i = 0; i < 8; i++) {
		fill_column(columns[i], rows[7]);
		wait(500);
	}
}
 288:	84 ea       	ldi	r24, 0xA4	; 164
 28a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 28e:	ec eb       	ldi	r30, 0xBC	; 188
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	ec f7       	brge	.-6      	; 0x292 <twi_start+0xa>
 298:	08 95       	ret

0000029a <twi_tx>:
 29a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 29e:	84 e8       	ldi	r24, 0x84	; 132
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2a4:	ec eb       	ldi	r30, 0xBC	; 188
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	88 23       	and	r24, r24
 2ac:	ec f7       	brge	.-6      	; 0x2a8 <twi_tx+0xe>
 2ae:	08 95       	ret

000002b0 <clear_column>:
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
 2b6:	0e 94 44 01 	call	0x288	; 0x288 <twi_start>
 2ba:	80 ee       	ldi	r24, 0xE0	; 224
 2bc:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
 2c0:	cc 0f       	add	r28, r28
 2c2:	dd 1f       	adc	r29, r29
 2c4:	ce 5e       	subi	r28, 0xEE	; 238
 2c6:	de 4f       	sbci	r29, 0xFE	; 254
 2c8:	88 81       	ld	r24, Y
 2ca:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
 2d4:	84 e9       	ldi	r24, 0x94	; 148
 2d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <fill_column>:
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	8c 01       	movw	r16, r24
 2ea:	eb 01       	movw	r28, r22
 2ec:	0e 94 44 01 	call	0x288	; 0x288 <twi_start>
 2f0:	80 ee       	ldi	r24, 0xE0	; 224
 2f2:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
 2f6:	00 0f       	add	r16, r16
 2f8:	11 1f       	adc	r17, r17
 2fa:	f8 01       	movw	r30, r16
 2fc:	ee 5e       	subi	r30, 0xEE	; 238
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	80 81       	ld	r24, Z
 302:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
 306:	cc 0f       	add	r28, r28
 308:	dd 1f       	adc	r29, r29
 30a:	ce 5f       	subi	r28, 0xFE	; 254
 30c:	de 4f       	sbci	r29, 0xFE	; 254
 30e:	88 81       	ld	r24, Y
 310:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
 314:	84 e9       	ldi	r24, 0x94	; 148
 316:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <clear_board>:
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	c2 e1       	ldi	r28, 0x12	; 18
 32e:	d1 e0       	ldi	r29, 0x01	; 1
 330:	02 e2       	ldi	r16, 0x22	; 34
 332:	11 e0       	ldi	r17, 0x01	; 1
 334:	89 91       	ld	r24, Y+
 336:	99 91       	ld	r25, Y+
 338:	0e 94 58 01 	call	0x2b0	; 0x2b0 <clear_column>
 33c:	c0 17       	cp	r28, r16
 33e:	d1 07       	cpc	r29, r17
 340:	c9 f7       	brne	.-14     	; 0x334 <clear_board+0x10>
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <twi_init>:

void twi_init(void)
{
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
	TWSR = 0;
 352:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 356:	80 e2       	ldi	r24, 0x20	; 32
 358:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//Init HT16K22. Page 32 datasheet
	twi_start();
 35c:	0e 94 44 01 	call	0x288	; 0x288 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 360:	80 ee       	ldi	r24, 0xE0	; 224
 362:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 366:	81 e2       	ldi	r24, 0x21	; 33
 368:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 36c:	cc eb       	ldi	r28, 0xBC	; 188
 36e:	d0 e0       	ldi	r29, 0x00	; 0
 370:	14 e9       	ldi	r17, 0x94	; 148
 372:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 374:	0e 94 44 01 	call	0x288	; 0x288 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 378:	80 ee       	ldi	r24, 0xE0	; 224
 37a:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 37e:	80 ea       	ldi	r24, 0xA0	; 160
 380:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 384:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 386:	0e 94 44 01 	call	0x288	; 0x288 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 38a:	80 ee       	ldi	r24, 0xE0	; 224
 38c:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 390:	83 ee       	ldi	r24, 0xE3	; 227
 392:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 396:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 398:	0e 94 44 01 	call	0x288	; 0x288 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 39c:	80 ee       	ldi	r24, 0xE0	; 224
 39e:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 3a2:	81 e8       	ldi	r24, 0x81	; 129
 3a4:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 3a8:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
	clear_board();
 3aa:	0e 94 92 01 	call	0x324	; 0x324 <clear_board>
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	08 95       	ret

000003b6 <getDirection>:
int direction = 0;		//	Determines the direction of the motor 

//	Getter for the direction
int getDirection(){
	return direction;
}
 3b6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <direction>
 3ba:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <direction+0x1>
 3be:	08 95       	ret

000003c0 <SetStep>:

//	Makes the motor set 1 step of 22,5 degrees in the selected direction
void SetStep(){
	PORTD |= 0b10000000;
 3c0:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c2:	8a e6       	ldi	r24, 0x6A	; 106
 3c4:	8a 95       	dec	r24
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <SetStep+0x4>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <SetStep+0xa>
	_delay_us(STEP_TRIGGER_VALUE);
	PORTD &= 0b01111111;
 3ca:	5f 98       	cbi	0x0b, 7	; 11
 3cc:	08 95       	ret

000003ce <ChangeDirection>:
}

//	Changes the direction variable and port
void ChangeDirection(){
	if(direction == 0){
 3ce:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <direction>
 3d2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <direction+0x1>
 3d6:	89 2b       	or	r24, r25
 3d8:	41 f4       	brne	.+16     	; 0x3ea <ChangeDirection+0x1c>
		direction = 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <direction+0x1>
 3e2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <direction>
		PORTD |= 0b01000000;
 3e6:	5e 9a       	sbi	0x0b, 6	; 11
 3e8:	08 95       	ret
	}
	else{
		direction = 0;
 3ea:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <direction+0x1>
 3ee:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <direction>
		PORTD &= 0b10111111;
 3f2:	5e 98       	cbi	0x0b, 6	; 11
 3f4:	08 95       	ret

000003f6 <wait>:
#include "util.h"

// ms : Determines how many milliseconds the wait will last
void wait (int ms)
{
	for (int i  = 0; i<ms; i++){
 3f6:	18 16       	cp	r1, r24
 3f8:	19 06       	cpc	r1, r25
 3fa:	6c f4       	brge	.+26     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	e7 e8       	ldi	r30, 0x87	; 135
 402:	f3 e1       	ldi	r31, 0x13	; 19
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	82 17       	cp	r24, r18
 412:	93 07       	cpc	r25, r19
 414:	a9 f7       	brne	.-22     	; 0x400 <__LOCK_REGION_LENGTH__>
 416:	08 95       	ret

00000418 <__divmodhi4>:
 418:	97 fb       	bst	r25, 7
 41a:	07 2e       	mov	r0, r23
 41c:	16 f4       	brtc	.+4      	; 0x422 <__divmodhi4+0xa>
 41e:	00 94       	com	r0
 420:	07 d0       	rcall	.+14     	; 0x430 <__divmodhi4_neg1>
 422:	77 fd       	sbrc	r23, 7
 424:	09 d0       	rcall	.+18     	; 0x438 <__divmodhi4_neg2>
 426:	0e 94 20 02 	call	0x440	; 0x440 <__udivmodhi4>
 42a:	07 fc       	sbrc	r0, 7
 42c:	05 d0       	rcall	.+10     	; 0x438 <__divmodhi4_neg2>
 42e:	3e f4       	brtc	.+14     	; 0x43e <__divmodhi4_exit>

00000430 <__divmodhi4_neg1>:
 430:	90 95       	com	r25
 432:	81 95       	neg	r24
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <__divmodhi4_neg2>:
 438:	70 95       	com	r23
 43a:	61 95       	neg	r22
 43c:	7f 4f       	sbci	r23, 0xFF	; 255

0000043e <__divmodhi4_exit>:
 43e:	08 95       	ret

00000440 <__udivmodhi4>:
 440:	aa 1b       	sub	r26, r26
 442:	bb 1b       	sub	r27, r27
 444:	51 e1       	ldi	r21, 0x11	; 17
 446:	07 c0       	rjmp	.+14     	; 0x456 <__udivmodhi4_ep>

00000448 <__udivmodhi4_loop>:
 448:	aa 1f       	adc	r26, r26
 44a:	bb 1f       	adc	r27, r27
 44c:	a6 17       	cp	r26, r22
 44e:	b7 07       	cpc	r27, r23
 450:	10 f0       	brcs	.+4      	; 0x456 <__udivmodhi4_ep>
 452:	a6 1b       	sub	r26, r22
 454:	b7 0b       	sbc	r27, r23

00000456 <__udivmodhi4_ep>:
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	5a 95       	dec	r21
 45c:	a9 f7       	brne	.-22     	; 0x448 <__udivmodhi4_loop>
 45e:	80 95       	com	r24
 460:	90 95       	com	r25
 462:	bc 01       	movw	r22, r24
 464:	cd 01       	movw	r24, r26
 466:	08 95       	ret

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
