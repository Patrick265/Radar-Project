
RadarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000460  000004f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800126  00800126  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f41  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2b  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000884  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  0000284c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  00002a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000463  00000000  00000000  00002f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int scanTimes = 0;


int main(void)
{
	twi_init();
  a6:	0e 94 a0 01 	call	0x340	; 0x340 <twi_init>
	//fill_board();
	//fill_board();
	clear_board();
  aa:	0e 94 8c 01 	call	0x318	; 0x318 <clear_board>
	DDRD = 0b11000000;
  ae:	80 ec       	ldi	r24, 0xC0	; 192
  b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00110000;
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	84 b9       	out	0x04, r24	; 4
	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
  b6:	e9 e6       	ldi	r30, 0x69	; 105
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
  c0:	e8 9a       	sbi	0x1d, 0	; 29
	
	sei();
  c2:	78 94       	sei
		for(scanAmount = 0; scanAmount < 100; scanAmount++){
			PORTB |= 0b00010000;
			_delay_us(15);
			PORTB &= 0b11101111;

			distance = (pulse / CM_CONVERT_VALUE); // Getting the distance in cm
  c4:	c4 e7       	ldi	r28, 0x74	; 116
  c6:	d0 e0       	ldi	r29, 0x00	; 0

		if(scanTimes != 0){
			int averageDistance;
			averageDistance = scanValue/scanTimes;
			clear_column(MotorIndex);
			fill_column(MotorIndex, (int)averageDistance/3);
  c8:	03 e0       	ldi	r16, 0x03	; 3
  ca:	10 e0       	ldi	r17, 0x00	; 0
	
	//fill_column(4, 5);
	while (1)
	{
		//Checking if the direction of the motor needs to be changed (At 0 or 180 degrees)
		if(MotorIndex == MAX_TURN_VALUE || MotorIndex == MIN_TURN_VALUE ){
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
  d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
  d4:	87 30       	cpi	r24, 0x07	; 7
  d6:	91 05       	cpc	r25, r1
  d8:	11 f0       	breq	.+4      	; 0xde <main+0x38>
  da:	89 2b       	or	r24, r25
  dc:	11 f4       	brne	.+4      	; 0xe2 <main+0x3c>
			ChangeDirection();
  de:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <ChangeDirection>
		}
		//Setting steps for 1/16th of 360 degrees
		for(i=0;i<STEP_SIZE;i++){
  e2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <i+0x1>
  e6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <i>
			SetStep();
  ea:	0e 94 da 01 	call	0x3b4	; 0x3b4 <SetStep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	89 e6       	ldi	r24, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x4e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x58>
  fe:	00 00       	nop
		//Checking if the direction of the motor needs to be changed (At 0 or 180 degrees)
		if(MotorIndex == MAX_TURN_VALUE || MotorIndex == MIN_TURN_VALUE ){
			ChangeDirection();
		}
		//Setting steps for 1/16th of 360 degrees
		for(i=0;i<STEP_SIZE;i++){
 100:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <i>
 104:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <i+0x1>
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <i+0x1>
 10e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <i>
 112:	03 97       	sbiw	r24, 0x03	; 3
 114:	54 f3       	brlt	.-44     	; 0xea <main+0x44>
			SetStep();
			_delay_ms(STEP_DELAY_VALUE);
		}
		//Updating the motorindex
		if(getDirection() == 0){
 116:	0e 94 d5 01 	call	0x3aa	; 0x3aa <getDirection>
 11a:	89 2b       	or	r24, r25
 11c:	51 f4       	brne	.+20     	; 0x132 <main+0x8c>
			MotorIndex = MotorIndex + 1;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MotorIndex+0x1>
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MotorIndex>
 130:	6e c0       	rjmp	.+220    	; 0x20e <main+0x168>
		}
		else{
			MotorIndex = MotorIndex - 1;
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MotorIndex+0x1>
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MotorIndex>
 144:	64 c0       	rjmp	.+200    	; 0x20e <main+0x168>
		}
		
		int scanAmount;
		for(scanAmount = 0; scanAmount < 100; scanAmount++){
			PORTB |= 0b00010000;
 146:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	80 e5       	ldi	r24, 0x50	; 80
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0xa4>
			_delay_us(15);
			PORTB &= 0b11101111;
 14e:	2c 98       	cbi	0x05, 4	; 5

			distance = (pulse / CM_CONVERT_VALUE); // Getting the distance in cm
 150:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pulse>
 154:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pulse+0x1>
 158:	be 01       	movw	r22, r28
 15a:	0e 94 06 02 	call	0x40c	; 0x40c <__divmodhi4>
 15e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <distance+0x1>
 162:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <distance>
			
			if(distance<=MAX_DISTANCE && distance >= MIN_DISTANCE){//&& distance <= 10){
 166:	63 50       	subi	r22, 0x03	; 3
 168:	71 09       	sbc	r23, r1
 16a:	66 31       	cpi	r22, 0x16	; 22
 16c:	71 05       	cpc	r23, r1
 16e:	c8 f4       	brcc	.+50     	; 0x1a2 <main+0xfc>
				PORTB |= 0b00100000;
 170:	2d 9a       	sbi	0x05, 5	; 5
				scanValue = scanValue + distance;
 172:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <scanValue>
 176:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <scanValue+0x1>
 17a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <distance>
 17e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <distance+0x1>
 182:	84 0f       	add	r24, r20
 184:	95 1f       	adc	r25, r21
 186:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <scanValue+0x1>
 18a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <scanValue>
				scanTimes += 1;
 18e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 192:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 19c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <main+0xfe>
			}
			else{
				PORTB &= 0b11011111;
 1a2:	2d 98       	cbi	0x05, 5	; 5
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	31 09       	sbc	r19, r1
		else{
			MotorIndex = MotorIndex - 1;
		}
		
		int scanAmount;
		for(scanAmount = 0; scanAmount < 100; scanAmount++){
 1a8:	71 f6       	brne	.-100    	; 0x146 <main+0xa0>
			else{
				PORTB &= 0b11011111;
			}
		}

		if(scanTimes != 0){
 1aa:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 1ae:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
 1b2:	61 15       	cp	r22, r1
 1b4:	71 05       	cpc	r23, r1
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <main+0x142>
			int averageDistance;
			averageDistance = scanValue/scanTimes;
 1b8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <scanValue>
 1bc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <scanValue+0x1>
 1c0:	0e 94 06 02 	call	0x40c	; 0x40c <__divmodhi4>
 1c4:	7b 01       	movw	r14, r22
			clear_column(MotorIndex);
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 1ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 1ce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_column>
			fill_column(MotorIndex, (int)averageDistance/3);
 1d2:	c7 01       	movw	r24, r14
 1d4:	b8 01       	movw	r22, r16
 1d6:	0e 94 06 02 	call	0x40c	; 0x40c <__divmodhi4>
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 1e2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <fill_column>
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <main+0x14e>
		}
		else{
			clear_column(MotorIndex);
 1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MotorIndex>
 1ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MotorIndex+0x1>
 1f0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_column>
		}
		scanTimes = 0;
 1f4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 1f8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		scanValue = 0;
 1fc:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <scanValue+0x1>
 200:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <scanValue>
		wait(1000);
 204:	88 ee       	ldi	r24, 0xE8	; 232
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	0e 94 f5 01 	call	0x3ea	; 0x3ea <wait>
	}
 20c:	5f cf       	rjmp	.-322    	; 0xcc <main+0x26>
int scanValue = 0;
int scanTimes = 0;


int main(void)
{
 20e:	24 e6       	ldi	r18, 0x64	; 100
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	99 cf       	rjmp	.-206    	; 0x146 <main+0xa0>

00000214 <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	if(UltrSoneOn == 1){
 226:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <UltrSoneOn>
 22a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <UltrSoneOn+0x1>
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	89 f4       	brne	.+34     	; 0x254 <__vector_1+0x40>
		TCCR1B = 0;
 232:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		pulse = TCNT1;
 236:	e4 e8       	ldi	r30, 0x84	; 132
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	91 81       	ldd	r25, Z+1	; 0x01
 23e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pulse+0x1>
 242:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pulse>
		TCNT1 = 0;
 246:	11 82       	std	Z+1, r1	; 0x01
 248:	10 82       	st	Z, r1
		UltrSoneOn = 0;
 24a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <UltrSoneOn+0x1>
 24e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <UltrSoneOn>
 252:	0b c0       	rjmp	.+22     	; 0x26a <__vector_1+0x56>
	}
	else{
		TCCR1B |= 1<<CS11;
 254:	e1 e8       	ldi	r30, 0x81	; 129
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	80 83       	st	Z, r24
		UltrSoneOn = 1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <UltrSoneOn+0x1>
 266:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <UltrSoneOn>
	}
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <twi_start>:
	int i;
	for ( i = 0; i < 8; i++) {
		fill_column(columns[i], rows[7]);
		wait(500);
	}
}
 27c:	84 ea       	ldi	r24, 0xA4	; 164
 27e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 282:	ec eb       	ldi	r30, 0xBC	; 188
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 23       	and	r24, r24
 28a:	ec f7       	brge	.-6      	; 0x286 <twi_start+0xa>
 28c:	08 95       	ret

0000028e <twi_tx>:
 28e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 292:	84 e8       	ldi	r24, 0x84	; 132
 294:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 298:	ec eb       	ldi	r30, 0xBC	; 188
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	88 23       	and	r24, r24
 2a0:	ec f7       	brge	.-6      	; 0x29c <twi_tx+0xe>
 2a2:	08 95       	ret

000002a4 <clear_column>:
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
 2aa:	0e 94 3e 01 	call	0x27c	; 0x27c <twi_start>
 2ae:	80 ee       	ldi	r24, 0xE0	; 224
 2b0:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
 2b4:	cc 0f       	add	r28, r28
 2b6:	dd 1f       	adc	r29, r29
 2b8:	ca 5e       	subi	r28, 0xEA	; 234
 2ba:	de 4f       	sbci	r29, 0xFE	; 254
 2bc:	88 81       	ld	r24, Y
 2be:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
 2c8:	84 e9       	ldi	r24, 0x94	; 148
 2ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <fill_column>:
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	8c 01       	movw	r16, r24
 2de:	eb 01       	movw	r28, r22
 2e0:	0e 94 3e 01 	call	0x27c	; 0x27c <twi_start>
 2e4:	80 ee       	ldi	r24, 0xE0	; 224
 2e6:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
 2ea:	00 0f       	add	r16, r16
 2ec:	11 1f       	adc	r17, r17
 2ee:	f8 01       	movw	r30, r16
 2f0:	ea 5e       	subi	r30, 0xEA	; 234
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	80 81       	ld	r24, Z
 2f6:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
 2fa:	cc 0f       	add	r28, r28
 2fc:	dd 1f       	adc	r29, r29
 2fe:	ca 5f       	subi	r28, 0xFA	; 250
 300:	de 4f       	sbci	r29, 0xFE	; 254
 302:	88 81       	ld	r24, Y
 304:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
 308:	84 e9       	ldi	r24, 0x94	; 148
 30a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <clear_board>:
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	c6 e1       	ldi	r28, 0x16	; 22
 322:	d1 e0       	ldi	r29, 0x01	; 1
 324:	06 e2       	ldi	r16, 0x26	; 38
 326:	11 e0       	ldi	r17, 0x01	; 1
 328:	89 91       	ld	r24, Y+
 32a:	99 91       	ld	r25, Y+
 32c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <clear_column>
 330:	c0 17       	cp	r28, r16
 332:	d1 07       	cpc	r29, r17
 334:	c9 f7       	brne	.-14     	; 0x328 <clear_board+0x10>
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	08 95       	ret

00000340 <twi_init>:

void twi_init(void)
{
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
	TWSR = 0;
 346:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 34a:	80 e2       	ldi	r24, 0x20	; 32
 34c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//Init HT16K22. Page 32 datasheet
	twi_start();
 350:	0e 94 3e 01 	call	0x27c	; 0x27c <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 354:	80 ee       	ldi	r24, 0xE0	; 224
 356:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 35a:	81 e2       	ldi	r24, 0x21	; 33
 35c:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 360:	cc eb       	ldi	r28, 0xBC	; 188
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	14 e9       	ldi	r17, 0x94	; 148
 366:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 368:	0e 94 3e 01 	call	0x27c	; 0x27c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 36c:	80 ee       	ldi	r24, 0xE0	; 224
 36e:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 372:	80 ea       	ldi	r24, 0xA0	; 160
 374:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 378:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 37a:	0e 94 3e 01 	call	0x27c	; 0x27c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 37e:	80 ee       	ldi	r24, 0xE0	; 224
 380:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 384:	83 ee       	ldi	r24, 0xE3	; 227
 386:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 38a:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 38c:	0e 94 3e 01 	call	0x27c	; 0x27c <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 390:	80 ee       	ldi	r24, 0xE0	; 224
 392:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 396:	81 e8       	ldi	r24, 0x81	; 129
 398:	0e 94 47 01 	call	0x28e	; 0x28e <twi_tx>
}


void twi_stop(void)
{
	TWCR = (0x80 | 0x10 | 0x04);
 39c:	18 83       	st	Y, r17

	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
	clear_board();
 39e:	0e 94 8c 01 	call	0x318	; 0x318 <clear_board>
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	08 95       	ret

000003aa <getDirection>:

int direction = 0;

int getDirection(){
	return direction;
}
 3aa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <direction>
 3ae:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <direction+0x1>
 3b2:	08 95       	ret

000003b4 <SetStep>:

void SetStep(){
	PORTD |= 0b10000000;
 3b4:	5f 9a       	sbi	0x0b, 7	; 11
 3b6:	8a e6       	ldi	r24, 0x6A	; 106
 3b8:	8a 95       	dec	r24
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <SetStep+0x4>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <SetStep+0xa>
	_delay_us(STEP_TRIGGER_VALUE);
	PORTD &= 0b01111111;
 3be:	5f 98       	cbi	0x0b, 7	; 11
 3c0:	08 95       	ret

000003c2 <ChangeDirection>:
}

void ChangeDirection(){
	if(direction == 0){
 3c2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <direction>
 3c6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <direction+0x1>
 3ca:	89 2b       	or	r24, r25
 3cc:	41 f4       	brne	.+16     	; 0x3de <ChangeDirection+0x1c>
		direction = 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <direction+0x1>
 3d6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <direction>
		PORTD |= 0b01000000;
 3da:	5e 9a       	sbi	0x0b, 6	; 11
 3dc:	08 95       	ret
	}
	else{
		direction = 0;
 3de:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <direction+0x1>
 3e2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <direction>
		PORTD &= 0b10111111;
 3e6:	5e 98       	cbi	0x0b, 6	; 11
 3e8:	08 95       	ret

000003ea <wait>:
#include <util/delay.h>
#include "util.h"

void wait (int ms)
{
	for (int i  = 0; i<ms; i++){
 3ea:	18 16       	cp	r1, r24
 3ec:	19 06       	cpc	r1, r25
 3ee:	6c f4       	brge	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f4:	e7 e8       	ldi	r30, 0x87	; 135
 3f6:	f3 e1       	ldi	r31, 0x13	; 19
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <wait+0xe>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <wait+0x14>
 3fe:	00 00       	nop
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	82 17       	cp	r24, r18
 406:	93 07       	cpc	r25, r19
 408:	a9 f7       	brne	.-22     	; 0x3f4 <wait+0xa>
 40a:	08 95       	ret

0000040c <__divmodhi4>:
 40c:	97 fb       	bst	r25, 7
 40e:	07 2e       	mov	r0, r23
 410:	16 f4       	brtc	.+4      	; 0x416 <__divmodhi4+0xa>
 412:	00 94       	com	r0
 414:	07 d0       	rcall	.+14     	; 0x424 <__divmodhi4_neg1>
 416:	77 fd       	sbrc	r23, 7
 418:	09 d0       	rcall	.+18     	; 0x42c <__divmodhi4_neg2>
 41a:	0e 94 1a 02 	call	0x434	; 0x434 <__udivmodhi4>
 41e:	07 fc       	sbrc	r0, 7
 420:	05 d0       	rcall	.+10     	; 0x42c <__divmodhi4_neg2>
 422:	3e f4       	brtc	.+14     	; 0x432 <__divmodhi4_exit>

00000424 <__divmodhi4_neg1>:
 424:	90 95       	com	r25
 426:	81 95       	neg	r24
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	08 95       	ret

0000042c <__divmodhi4_neg2>:
 42c:	70 95       	com	r23
 42e:	61 95       	neg	r22
 430:	7f 4f       	sbci	r23, 0xFF	; 255

00000432 <__divmodhi4_exit>:
 432:	08 95       	ret

00000434 <__udivmodhi4>:
 434:	aa 1b       	sub	r26, r26
 436:	bb 1b       	sub	r27, r27
 438:	51 e1       	ldi	r21, 0x11	; 17
 43a:	07 c0       	rjmp	.+14     	; 0x44a <__udivmodhi4_ep>

0000043c <__udivmodhi4_loop>:
 43c:	aa 1f       	adc	r26, r26
 43e:	bb 1f       	adc	r27, r27
 440:	a6 17       	cp	r26, r22
 442:	b7 07       	cpc	r27, r23
 444:	10 f0       	brcs	.+4      	; 0x44a <__udivmodhi4_ep>
 446:	a6 1b       	sub	r26, r22
 448:	b7 0b       	sbc	r27, r23

0000044a <__udivmodhi4_ep>:
 44a:	88 1f       	adc	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	5a 95       	dec	r21
 450:	a9 f7       	brne	.-22     	; 0x43c <__udivmodhi4_loop>
 452:	80 95       	com	r24
 454:	90 95       	com	r25
 456:	bc 01       	movw	r22, r24
 458:	cd 01       	movw	r24, r26
 45a:	08 95       	ret

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
