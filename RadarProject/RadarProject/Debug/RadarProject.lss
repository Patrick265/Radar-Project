
RadarProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000033c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  000003e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c80  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000970  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065d  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000373  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 9c 01 	jmp	0x338	; 0x338 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:



int main(void)
{
	loadMatrix();
  a6:	0e 94 28 01 	call	0x250	; 0x250 <loadMatrix>
	DDRB = 0b00110000;
  aa:	80 e3       	ldi	r24, 0x30	; 48
  ac:	84 b9       	out	0x04, r24	; 4
	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
  ae:	e9 e6       	ldi	r30, 0x69	; 105
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
  b8:	e8 9a       	sbi	0x1d, 0	; 29

	sei();                    // turn on interrupts
  ba:	78 94       	sei
	//PORTB = 0b00100000;
	while(1){
			PORTB |= 0b00010000;
			_delay_us(15);
			PORTB &= 0b11101111;
			distance = (pulse / 58)*2; // Getting the distance in cm
  bc:	2a e3       	ldi	r18, 0x3A	; 58
  be:	30 e0       	ldi	r19, 0x00	; 0
	EIMSK |= (1 << INT0);     // Turns on INT0

	sei();                    // turn on interrupts
	//PORTB = 0b00100000;
	while(1){
			PORTB |= 0b00010000;
  c0:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	84 e6       	ldi	r24, 0x64	; 100
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x1e>
			_delay_us(15);
			PORTB &= 0b11101111;
  c8:	2c 98       	cbi	0x05, 4	; 5
			distance = (pulse / 58)*2; // Getting the distance in cm
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pulse>
  ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pulse+0x1>
  d2:	b9 01       	movw	r22, r18
  d4:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodhi4>
  d8:	66 0f       	add	r22, r22
  da:	77 1f       	adc	r23, r23
  dc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  e0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
			if(distance<=12 ){//&& distance <= 10){
  e4:	6d 30       	cpi	r22, 0x0D	; 13
  e6:	71 05       	cpc	r23, r1
  e8:	14 f4       	brge	.+4      	; 0xee <main+0x48>
				PORTB |= 0b00100000;
  ea:	2d 9a       	sbi	0x05, 5	; 5
  ec:	e9 cf       	rjmp	.-46     	; 0xc0 <main+0x1a>
			}
			else{
				
				PORTB &= 0b11011111;
  ee:	2d 98       	cbi	0x05, 5	; 5
  f0:	e7 cf       	rjmp	.-50     	; 0xc0 <main+0x1a>

000000f2 <__vector_1>:
			}
	}
}

ISR(INT0_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	if(UltrSoneOn == 1){
 110:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 114:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	d9 f4       	brne	.+54     	; 0x152 <__vector_1+0x60>
		TCCR1B = 0;
 11c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		pulse = TCNT1/58;
 120:	e4 e8       	ldi	r30, 0x84	; 132
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	20 81       	ld	r18, Z
 126:	31 81       	ldd	r19, Z+1	; 0x01
 128:	af e9       	ldi	r26, 0x9F	; 159
 12a:	b6 e4       	ldi	r27, 0x46	; 70
 12c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__umulhisi3>
 130:	92 95       	swap	r25
 132:	82 95       	swap	r24
 134:	8f 70       	andi	r24, 0x0F	; 15
 136:	89 27       	eor	r24, r25
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	89 27       	eor	r24, r25
 13c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pulse+0x1>
 140:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pulse>
		TCNT1 = 0;
 144:	11 82       	std	Z+1, r1	; 0x01
 146:	10 82       	st	Z, r1
		UltrSoneOn = 0;
 148:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 14c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 150:	0b c0       	rjmp	.+22     	; 0x168 <__vector_1+0x76>
	}
	else{
		TCCR1B |= 1<<CS10;
 152:	e1 e8       	ldi	r30, 0x81	; 129
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 83       	st	Z, r24
		UltrSoneOn = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 164:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	}
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <twi_init>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 186:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 190:	08 95       	ret

00000192 <twi_start>:
 192:	84 ea       	ldi	r24, 0xA4	; 164
 194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 198:	ec eb       	ldi	r30, 0xBC	; 188
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	ec f7       	brge	.-6      	; 0x19c <twi_start+0xa>
 1a2:	08 95       	ret

000001a4 <twi_tx>:
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (0x80 | 0x04);
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while( 0 == (TWCR & 0x80) );
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	ec f7       	brge	.-6      	; 0x1b2 <twi_tx+0xe>
}
 1b8:	08 95       	ret

000001ba <fill>:

/******************************************************************/
/******************************************************************/

void fill(void)
{
 1ba:	9f 92       	push	r9
 1bc:	af 92       	push	r10
 1be:	bf 92       	push	r11
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f4 e0       	ldi	r31, 0x04	; 4
 1d4:	af 2e       	mov	r10, r31
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	bf 2e       	mov	r11, r31
 1da:	f0 2d       	mov	r31, r0
 1dc:	0f 2e       	mov	r0, r31
 1de:	f4 e1       	ldi	r31, 0x14	; 20
 1e0:	ef 2e       	mov	r14, r31
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	ff 2e       	mov	r15, r31
 1e6:	f0 2d       	mov	r31, r0
 1e8:	85 01       	movw	r16, r10
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1ea:	0f 2e       	mov	r0, r31
 1ec:	fc eb       	ldi	r31, 0xBC	; 188
 1ee:	cf 2e       	mov	r12, r31
 1f0:	d1 2c       	mov	r13, r1
 1f2:	f0 2d       	mov	r31, r0
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f4 e9       	ldi	r31, 0x94	; 148
 1f8:	9f 2e       	mov	r9, r31
 1fa:	f0 2d       	mov	r31, r0
 1fc:	1b c0       	rjmp	.+54     	; 0x234 <fill+0x7a>
	for(i = 0; i < 8; i++)
	{
		int z;
		for(z = 0; z < 8; z++)
		{
					twi_start();
 1fe:	0e 94 c9 00 	call	0x192	; 0x192 <twi_start>
					twi_tx(0xE0);	// Display I2C addres + R/W bit
 202:	80 ee       	ldi	r24, 0xE0	; 224
 204:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
					twi_tx(posArray[i]);	// Address
 208:	f8 01       	movw	r30, r16
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
					twi_tx(posArray[z]);	// data
 210:	88 81       	ld	r24, Y
 212:	22 96       	adiw	r28, 0x02	; 2
 214:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 218:	f6 01       	movw	r30, r12
 21a:	90 82       	st	Z, r9
					twi_start();
					twi_tx(0xE0);	// Display I2C addres + R/W bit
					twi_tx(posArray[i]);	// Address
					twi_tx(posArray[z]);	// data
					twi_stop();
					wait(500);
 21c:	84 ef       	ldi	r24, 0xF4	; 244
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 54 01 	call	0x2a8	; 0x2a8 <wait>
{
	int i;
	for(i = 0; i < 8; i++)
	{
		int z;
		for(z = 0; z < 8; z++)
 224:	ec 16       	cp	r14, r28
 226:	fd 06       	cpc	r15, r29
 228:	51 f7       	brne	.-44     	; 0x1fe <fill+0x44>
 22a:	0e 5f       	subi	r16, 0xFE	; 254
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
/******************************************************************/

void fill(void)
{
	int i;
	for(i = 0; i < 8; i++)
 22e:	e0 16       	cp	r14, r16
 230:	f1 06       	cpc	r15, r17
 232:	11 f0       	breq	.+4      	; 0x238 <fill+0x7e>

/******************************************************************/
/******************************************************************/

void fill(void)
{
 234:	e5 01       	movw	r28, r10
 236:	e3 cf       	rjmp	.-58     	; 0x1fe <fill+0x44>
					wait(500);
		}
		
	}

}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	ff 90       	pop	r15
 242:	ef 90       	pop	r14
 244:	df 90       	pop	r13
 246:	cf 90       	pop	r12
 248:	bf 90       	pop	r11
 24a:	af 90       	pop	r10
 24c:	9f 90       	pop	r9
 24e:	08 95       	ret

00000250 <loadMatrix>:
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	
	twi_init();		// Init TWI interface
 250:	0e 94 c3 00 	call	0x186	; 0x186 <twi_init>

	// Init HT16K22. Page 32 datasheet
	twi_start();
 254:	0e 94 c9 00 	call	0x192	; 0x192 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 258:	80 ee       	ldi	r24, 0xE0	; 224
 25a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 25e:	81 e2       	ldi	r24, 0x21	; 33
 260:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 264:	cc eb       	ldi	r28, 0xBC	; 188
 266:	d0 e0       	ldi	r29, 0x00	; 0
 268:	14 e9       	ldi	r17, 0x94	; 148
 26a:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();

	twi_start();
 26c:	0e 94 c9 00 	call	0x192	; 0x192 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 270:	80 ee       	ldi	r24, 0xE0	; 224
 272:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 276:	80 ea       	ldi	r24, 0xA0	; 160
 278:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 27c:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();

	twi_start();
 27e:	0e 94 c9 00 	call	0x192	; 0x192 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 282:	80 ee       	ldi	r24, 0xE0	; 224
 284:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 288:	83 ee       	ldi	r24, 0xE3	; 227
 28a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 28e:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();

	twi_start();
 290:	0e 94 c9 00 	call	0x192	; 0x192 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 294:	80 ee       	ldi	r24, 0xE0	; 224
 296:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 29a:	81 e8       	ldi	r24, 0x81	; 129
 29c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <twi_tx>
outputs:	
notes:			
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 2a0:	18 83       	st	Y, r17
	
	

	while (1)
	{
		fill();
 2a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <fill>
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <loadMatrix+0x52>

000002a8 <wait>:
#include <util/delay.h>
#include "Dependency/util.h"

void wait (int ms)
{
	for (int i  = 0; i<ms; i++){
 2a8:	18 16       	cp	r1, r24
 2aa:	19 06       	cpc	r1, r25
 2ac:	6c f4       	brge	.+26     	; 0x2c8 <wait+0x20>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	e7 e8       	ldi	r30, 0x87	; 135
 2b4:	f3 e1       	ldi	r31, 0x13	; 19
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <wait+0xe>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <wait+0x14>
 2bc:	00 00       	nop
 2be:	2f 5f       	subi	r18, 0xFF	; 255
 2c0:	3f 4f       	sbci	r19, 0xFF	; 255
 2c2:	82 17       	cp	r24, r18
 2c4:	93 07       	cpc	r25, r19
 2c6:	a9 f7       	brne	.-22     	; 0x2b2 <wait+0xa>
 2c8:	08 95       	ret

000002ca <__divmodhi4>:
 2ca:	97 fb       	bst	r25, 7
 2cc:	07 2e       	mov	r0, r23
 2ce:	16 f4       	brtc	.+4      	; 0x2d4 <__divmodhi4+0xa>
 2d0:	00 94       	com	r0
 2d2:	07 d0       	rcall	.+14     	; 0x2e2 <__divmodhi4_neg1>
 2d4:	77 fd       	sbrc	r23, 7
 2d6:	09 d0       	rcall	.+18     	; 0x2ea <__divmodhi4_neg2>
 2d8:	0e 94 88 01 	call	0x310	; 0x310 <__udivmodhi4>
 2dc:	07 fc       	sbrc	r0, 7
 2de:	05 d0       	rcall	.+10     	; 0x2ea <__divmodhi4_neg2>
 2e0:	3e f4       	brtc	.+14     	; 0x2f0 <__divmodhi4_exit>

000002e2 <__divmodhi4_neg1>:
 2e2:	90 95       	com	r25
 2e4:	81 95       	neg	r24
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	08 95       	ret

000002ea <__divmodhi4_neg2>:
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255

000002f0 <__divmodhi4_exit>:
 2f0:	08 95       	ret

000002f2 <__umulhisi3>:
 2f2:	a2 9f       	mul	r26, r18
 2f4:	b0 01       	movw	r22, r0
 2f6:	b3 9f       	mul	r27, r19
 2f8:	c0 01       	movw	r24, r0
 2fa:	a3 9f       	mul	r26, r19
 2fc:	70 0d       	add	r23, r0
 2fe:	81 1d       	adc	r24, r1
 300:	11 24       	eor	r1, r1
 302:	91 1d       	adc	r25, r1
 304:	b2 9f       	mul	r27, r18
 306:	70 0d       	add	r23, r0
 308:	81 1d       	adc	r24, r1
 30a:	11 24       	eor	r1, r1
 30c:	91 1d       	adc	r25, r1
 30e:	08 95       	ret

00000310 <__udivmodhi4>:
 310:	aa 1b       	sub	r26, r26
 312:	bb 1b       	sub	r27, r27
 314:	51 e1       	ldi	r21, 0x11	; 17
 316:	07 c0       	rjmp	.+14     	; 0x326 <__udivmodhi4_ep>

00000318 <__udivmodhi4_loop>:
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	a6 17       	cp	r26, r22
 31e:	b7 07       	cpc	r27, r23
 320:	10 f0       	brcs	.+4      	; 0x326 <__udivmodhi4_ep>
 322:	a6 1b       	sub	r26, r22
 324:	b7 0b       	sbc	r27, r23

00000326 <__udivmodhi4_ep>:
 326:	88 1f       	adc	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	5a 95       	dec	r21
 32c:	a9 f7       	brne	.-22     	; 0x318 <__udivmodhi4_loop>
 32e:	80 95       	com	r24
 330:	90 95       	com	r25
 332:	bc 01       	movw	r22, r24
 334:	cd 01       	movw	r24, r26
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
