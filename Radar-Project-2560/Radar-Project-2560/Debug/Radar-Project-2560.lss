
Radar-Project-2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800204  00800204  0000030c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e33  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c88  00000000  00000000  000011df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ba  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020f  00000000  00000000  0000288d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	b2 c0       	rjmp	.+356    	; 0x16a <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e7       	ldi	r30, 0x74	; 116
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 30       	cpi	r26, 0x06	; 6
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	a7 c0       	rjmp	.+334    	; 0x270 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:


int main(void)
{
	//loadMatrix();
	DDRB = 0b01000000;
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	84 b9       	out	0x04, r24	; 4
	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
 128:	e9 e6       	ldi	r30, 0x69	; 105
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
 132:	e8 9a       	sbi	0x1d, 0	; 29

	sei();                    // turn on interrupts
 134:	78 94       	sei
	//PORTB = 0b00100000;
	while(1){
			PORTB |= 0b00000001;
			_delay_us(15);
			PORTB &= 0b11111110;
			distance = (pulse / 58)*2; // Getting the distance in cm
 136:	2a e3       	ldi	r18, 0x3A	; 58
 138:	30 e0       	ldi	r19, 0x00	; 0
	EIMSK |= (1 << INT0);     // Turns on INT0

	sei();                    // turn on interrupts
	//PORTB = 0b00100000;
	while(1){
			PORTB |= 0b00000001;
 13a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	80 e5       	ldi	r24, 0x50	; 80
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x1a>
			_delay_us(15);
			PORTB &= 0b11111110;
 142:	28 98       	cbi	0x05, 0	; 5
			distance = (pulse / 58)*2; // Getting the distance in cm
 144:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <pulse>
 148:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pulse+0x1>
 14c:	b9 01       	movw	r22, r18
 14e:	5a d0       	rcall	.+180    	; 0x204 <__divmodhi4>
 150:	66 0f       	add	r22, r22
 152:	77 1f       	adc	r23, r23
 154:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <__data_start+0x1>
 158:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <__data_start>
			if(distance<=12 ){//&& distance <= 10){
 15c:	6d 30       	cpi	r22, 0x0D	; 13
 15e:	71 05       	cpc	r23, r1
 160:	14 f4       	brge	.+4      	; 0x166 <main+0x42>
				PORTB |= 0b01000000;
 162:	2e 9a       	sbi	0x05, 6	; 5
 164:	ea cf       	rjmp	.-44     	; 0x13a <main+0x16>
			}
			else{
				//
				PORTB &= 0b10111111;
 166:	2e 98       	cbi	0x05, 6	; 5
 168:	e8 cf       	rjmp	.-48     	; 0x13a <main+0x16>

0000016a <__vector_1>:
			//_delay_ms(500);
	}
}

ISR(INT0_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	0b b6       	in	r0, 0x3b	; 59
 176:	0f 92       	push	r0
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	if(UltrSoneOn == 1){
 18c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 190:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	d1 f4       	brne	.+52     	; 0x1cc <__vector_1+0x62>
		TCCR1B = 0;
 198:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
		pulse = TCNT1/58;
 19c:	e4 e8       	ldi	r30, 0x84	; 132
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	20 81       	ld	r18, Z
 1a2:	31 81       	ldd	r19, Z+1	; 0x01
 1a4:	af e9       	ldi	r26, 0x9F	; 159
 1a6:	b6 e4       	ldi	r27, 0x46	; 70
 1a8:	40 d0       	rcall	.+128    	; 0x22a <__umulhisi3>
 1aa:	92 95       	swap	r25
 1ac:	82 95       	swap	r24
 1ae:	8f 70       	andi	r24, 0x0F	; 15
 1b0:	89 27       	eor	r24, r25
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	89 27       	eor	r24, r25
 1b6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <pulse+0x1>
 1ba:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <pulse>
		TCNT1 = 0;
 1be:	11 82       	std	Z+1, r1	; 0x01
 1c0:	10 82       	st	Z, r1
		UltrSoneOn = 0;
 1c2:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
 1c6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
 1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <__vector_1+0x78>
	}
	else{
		TCCR1B |= 1<<CS10;
 1cc:	e1 e8       	ldi	r30, 0x81	; 129
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	80 83       	st	Z, r24
		UltrSoneOn = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
 1de:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
	}
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0b be       	out	0x3b, r0	; 59
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__divmodhi4>:
 204:	97 fb       	bst	r25, 7
 206:	07 2e       	mov	r0, r23
 208:	16 f4       	brtc	.+4      	; 0x20e <__divmodhi4+0xa>
 20a:	00 94       	com	r0
 20c:	06 d0       	rcall	.+12     	; 0x21a <__divmodhi4_neg1>
 20e:	77 fd       	sbrc	r23, 7
 210:	08 d0       	rcall	.+16     	; 0x222 <__divmodhi4_neg2>
 212:	1a d0       	rcall	.+52     	; 0x248 <__udivmodhi4>
 214:	07 fc       	sbrc	r0, 7
 216:	05 d0       	rcall	.+10     	; 0x222 <__divmodhi4_neg2>
 218:	3e f4       	brtc	.+14     	; 0x228 <__divmodhi4_exit>

0000021a <__divmodhi4_neg1>:
 21a:	90 95       	com	r25
 21c:	81 95       	neg	r24
 21e:	9f 4f       	sbci	r25, 0xFF	; 255
 220:	08 95       	ret

00000222 <__divmodhi4_neg2>:
 222:	70 95       	com	r23
 224:	61 95       	neg	r22
 226:	7f 4f       	sbci	r23, 0xFF	; 255

00000228 <__divmodhi4_exit>:
 228:	08 95       	ret

0000022a <__umulhisi3>:
 22a:	a2 9f       	mul	r26, r18
 22c:	b0 01       	movw	r22, r0
 22e:	b3 9f       	mul	r27, r19
 230:	c0 01       	movw	r24, r0
 232:	a3 9f       	mul	r26, r19
 234:	70 0d       	add	r23, r0
 236:	81 1d       	adc	r24, r1
 238:	11 24       	eor	r1, r1
 23a:	91 1d       	adc	r25, r1
 23c:	b2 9f       	mul	r27, r18
 23e:	70 0d       	add	r23, r0
 240:	81 1d       	adc	r24, r1
 242:	11 24       	eor	r1, r1
 244:	91 1d       	adc	r25, r1
 246:	08 95       	ret

00000248 <__udivmodhi4>:
 248:	aa 1b       	sub	r26, r26
 24a:	bb 1b       	sub	r27, r27
 24c:	51 e1       	ldi	r21, 0x11	; 17
 24e:	07 c0       	rjmp	.+14     	; 0x25e <__udivmodhi4_ep>

00000250 <__udivmodhi4_loop>:
 250:	aa 1f       	adc	r26, r26
 252:	bb 1f       	adc	r27, r27
 254:	a6 17       	cp	r26, r22
 256:	b7 07       	cpc	r27, r23
 258:	10 f0       	brcs	.+4      	; 0x25e <__udivmodhi4_ep>
 25a:	a6 1b       	sub	r26, r22
 25c:	b7 0b       	sbc	r27, r23

0000025e <__udivmodhi4_ep>:
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	5a 95       	dec	r21
 264:	a9 f7       	brne	.-22     	; 0x250 <__udivmodhi4_loop>
 266:	80 95       	com	r24
 268:	90 95       	com	r25
 26a:	bc 01       	movw	r22, r24
 26c:	cd 01       	movw	r24, r26
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
